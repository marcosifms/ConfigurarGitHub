/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package view;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import tools.Commands;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Base64;
import java.util.List;
import javax.swing.JFileChooser;
import tools.OsUtils;
import tools.Util;

/**
 *
 * @author Marcos
 */
public class JConfigGitHub extends javax.swing.JDialog {

    /**
     * Creates new form JConfigGitHub
     */
    private static final String ARQUIVO_DADOS = "dados_tela.txt";

    public JConfigGitHub(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        jTabbedPane1.setSelectedIndex(0);
        jTabbedPane1.setEnabledAt(1,false);
        setTitle("Configuração básica do git hub. Disciplina de LP 4. Prof. Marcos Pinheiro Vilhanueva");
        Util.habilitar(false, jCboSistOperacional, jTxtNick, jTxtEmail, jTxtRepositorio,
                jBtnConfigGit, jBtnLimpar);
//        System.out.println(OsUtils.getOsName()); 
        if (OsUtils.isWindows()) {
            jCboSistOperacional.setSelectedIndex(0);
        } else {
            jCboSistOperacional.setSelectedIndex(1);
        }
    }

    public boolean gitConfigurado(String diretorio) {
        //File file = new File(diretorio);
        String[] cmds1 = {
            diretorio.substring(0, 2),
            "cd " + diretorio,
            "git status"
        };
        Commands commands = new Commands();
        List lista = commands.processaCmd(cmds1);
        return !((String) lista.get(0)).contains("fatal: not a git repository");
    }

    public List gitHistoricoCommit() {
        String diretorio = jTxtDiretorio.getText();
        String[] cmds1 = {
            diretorio.substring(0, 2),
            "cd " + diretorio,
            "git log"
        };
        Commands commands = new Commands();
        return commands.processaCmd(cmds1);
    }

    private void salvarDados() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(ARQUIVO_DADOS))) {
            writer.write(jCboSistOperacional.getSelectedIndex() + "\n");
            writer.write(jTxtDiretorio.getText() + "\n");
//            writer.write(jTxtEmail.getText() + "\n");
//            writer.write(jTxtNick.getText() + "\n");
//            writer.write(jTxtRepositorio.getText() + "\n");
//            writer.write(Base64.getEncoder().encodeToString(jTextArea1.getText().getBytes()) + "\n"); // Evita quebras de linha problemáticas
//            writer.write(Base64.getEncoder().encodeToString(jTextArea2.getText().getBytes()) + "\n"); // Evita quebras de linha problemáticas
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void carregarDados() {
        File file = new File(ARQUIVO_DADOS);
        if (!file.exists()) {
            return;
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {

            jCboSistOperacional.setSelectedIndex(Integer.parseInt(reader.readLine()));
            jTxtDiretorio.setText(reader.readLine());

        } catch (IOException | NumberFormatException e) {
            e.printStackTrace();
        }
    }

    private void carregarUltimaConfiguracao() {
        File file = new File(ARQUIVO_DADOS);
        if (!file.exists()) {
            return;
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {

            jCboSistOperacional.setSelectedIndex(Integer.parseInt(reader.readLine()));
            jTxtDiretorio.setText(reader.readLine());
            jTxtEmail.setText(reader.readLine());
            jTxtNick.setText(reader.readLine());
            jTxtRepositorio.setText(reader.readLine());
//            jTextArea1.setText(new String(Base64.getDecoder().decode(reader.readLine())));
//            jTextArea2.setText(new String(Base64.getDecoder().decode(reader.readLine())));

        } catch (IOException | NumberFormatException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jCboSistOperacional = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jTxtNick = new javax.swing.JTextField();
        jTxtEmail = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTxtDiretorio = new javax.swing.JTextField();
        jBtnArquivoSistec = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jBtnVerificar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTxtRepositorio = new javax.swing.JTextField();
        jBtnConfigGit = new javax.swing.JButton();
        jBtnLimpar = new javax.swing.JButton();
        jBtnUltimaConfig = new javax.swing.JButton();
        jBtnClonarRepositorio = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jBtnCommitLocal = new javax.swing.JButton();
        jBtnPush = new javax.swing.JButton();
        jBtnCommitPush = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jBtnHistorico = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Sistema Operacional");

        jCboSistOperacional.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Windows", "Linux", "Mac" }));

        jLabel2.setText("Nick Name");

        jLabel3.setText("E-Mail");

        jTxtDiretorio.setText("F:\\DriveC_Atual\\Documents\\NetBeansProjects");

        jBtnArquivoSistec.setText("...");
        jBtnArquivoSistec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnArquivoSistecActionPerformed(evt);
            }
        });

        jLabel7.setText("Diretório GIT");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jBtnVerificar.setText("Verificar");
        jBtnVerificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnVerificarActionPerformed(evt);
            }
        });

        jLabel4.setText("Nome do Repositório");

        jBtnConfigGit.setText("Processar Conf. Git");
        jBtnConfigGit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnConfigGitActionPerformed(evt);
            }
        });

        jBtnLimpar.setText("Limpar Configurações");
        jBtnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnLimparActionPerformed(evt);
            }
        });

        jBtnUltimaConfig.setText("Última configuração");
        jBtnUltimaConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnUltimaConfigActionPerformed(evt);
            }
        });

        jBtnClonarRepositorio.setText("Clonar Repositorio");
        jBtnClonarRepositorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnClonarRepositorioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jTxtNick)
                    .addComponent(jCboSistOperacional, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTxtEmail)
                    .addComponent(jTxtRepositorio)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTxtDiretorio, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtnArquivoSistec))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel4)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jBtnConfigGit)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jBtnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jBtnClonarRepositorio)))
                                .addGap(0, 181, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jBtnVerificar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtnUltimaConfig)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTxtDiretorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnArquivoSistec)
                    .addComponent(jBtnVerificar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCboSistOperacional, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTxtNick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTxtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTxtRepositorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnConfigGit)
                    .addComponent(jBtnLimpar)
                    .addComponent(jBtnUltimaConfig)
                    .addComponent(jBtnClonarRepositorio))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Configurar", jPanel1);

        jLabel5.setText("Texto do Commit");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jBtnCommitLocal.setText("Commit Local");
        jBtnCommitLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCommitLocalActionPerformed(evt);
            }
        });

        jBtnPush.setText("Push ");
        jBtnPush.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnPushActionPerformed(evt);
            }
        });

        jBtnCommitPush.setText("Commit e Push");
        jBtnCommitPush.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCommitPushActionPerformed(evt);
            }
        });

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jBtnHistorico.setText("Histórico Git");
        jBtnHistorico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnHistoricoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jBtnCommitLocal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnPush, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnCommitPush)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 311, Short.MAX_VALUE)
                        .addComponent(jBtnHistorico)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnCommitLocal)
                    .addComponent(jBtnPush)
                    .addComponent(jBtnCommitPush)
                    .addComponent(jBtnHistorico))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Commit, Push e Histórico", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnArquivoSistecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnArquivoSistecActionPerformed
        // TODO add your handling code here:
        final JFileChooser fc;
        //verifica se tem alguma informacao no JTextField
        if (jTxtDiretorio.getText().trim().isEmpty()) {
            fc = new JFileChooser();
        } else {
            fc = new JFileChooser(jTxtDiretorio.getText());
        }
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //pega o arquivo selecionado
            File file = fc.getSelectedFile();
            //seta a informação do arquivo selecionado
            jTxtDiretorio.setText(file.getPath());
            jTextArea1.setText(null);//limpar textArea
            Util.habilitar(false, jCboSistOperacional, jTxtNick, jTxtEmail);
        }
    }//GEN-LAST:event_jBtnArquivoSistecActionPerformed

    private void jBtnVerificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnVerificarActionPerformed
        // TODO add your handling code here:        
//        File file = new File(jTxtDiretorio.getText());
//            System.out.println(file.getPath().substring(0, 2));

//        String[] cmds1 = {
//            file.getPath().substring(0, 2),
//            "cd " + file.getPath(),
//            "git status"
//        };
        if (jTxtDiretorio.getText().isEmpty()) {
            Util.mensagem("Um diretório deve ser escolhido para verificação. ");
        } else {
            Commands commands = new Commands();
//        List lista = commands.processaCmd(cmds1);
//        if (((String) lista.get(0)).contains("fatal: not a git repository")) {
//            jTextArea1.append((String) lista.get(0));

            jTextArea1.append("Verificação em " + new java.util.Date() + "\n");
            jTextArea1.append("""
                              -----------------------------------------------
                              """);
            if (!gitConfigurado(jTxtDiretorio.getText())) {
                jTextArea1.append("GIT não está configurado. \n Preencha Nick name, "
                        + "email e nome do repositorio. Depois clique no botão 'Processar Conf. Git'");
            } else {
                String[] cmds2 = {
                    jTxtDiretorio.getText().substring(0, 2), //muda para o diretorio no windows
                    "cd " + jTxtDiretorio.getText(),
                    "git config --list"
                };
                List lista = commands.processaCmd(cmds2);
                for (int i = 0; i < lista.size(); i++) {
                    System.out.println(lista.get(i));
                    if ((((String) lista.get(i)).contains("user."))
                            || (((String) lista.get(i)).contains("remote."))) {
                        jTextArea1.append(lista.get(i) + "\n");
                    }
                    if (((String) lista.get(i)).contains("user.name")) {
                        String texto = (String) lista.get(i);
                        texto = texto.substring(texto.indexOf("=") + 1);
                        jTxtNick.setText(texto);
                    }
                    if (((String) lista.get(i)).contains("user.email")) {
                        String texto = (String) lista.get(i);
                        texto = texto.substring(texto.indexOf("=") + 1);
                        jTxtEmail.setText(texto);
                    }
                    if (((String) lista.get(i)).contains("remote.origin.url")) {
                        String texto = (String) lista.get(i);
                        texto = texto.substring(texto.indexOf("=") + 1);
                        jTxtRepositorio.setText(texto);
                    }
                }
            }
            Util.habilitar(true, jCboSistOperacional, jTxtNick, jTxtEmail, jTxtRepositorio,
                    jBtnConfigGit, jBtnLimpar);
            jTabbedPane1.setEnabledAt(1,true);
        }
    }//GEN-LAST:event_jBtnVerificarActionPerformed

    private void jBtnCommitLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCommitLocalActionPerformed
        // TODO add your handling code here:
        if (jTextArea2.getText().isEmpty()) {
            Util.mensagem("Para este comando deve ser preenchido o Texto do commit.");
            jTextArea2.grabFocus();
        } else if (!gitConfigurado(jTxtDiretorio.getText())) {
            Util.mensagem("GIT não está configurado para o diretório " + jTxtDiretorio.getText() + ".");
        } else {
            String[] cmds1 = {
                //                    jTxtDiretorio.getText().substring(0, 2), //muda para o diretorio no windows
                //                    "cd " + jTxtDiretorio.getText(),
                "git add *",
                "git commit -m \"" + jTextArea2.getText() + "\""
            };
            jTextArea1.append("Commit em " + new java.util.Date() + "\n");
            jTextArea1.append("-----------------------------------------------" + "\n");
            Commands commands = new Commands();
            List lista = commands.processaCmd(cmds1);
            for (int i = 0; i < lista.size(); i++) {
                System.out.println(lista.get(i));
                jTextArea3.append(lista.get(i) + "\n");
            }
        }

    }//GEN-LAST:event_jBtnCommitLocalActionPerformed

    private void jBtnPushActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnPushActionPerformed
        // TODO add your handling code here:git push -u origin main        
        if (!gitConfigurado(jTxtDiretorio.getText())) {
            Util.mensagem("GIT não está configurado para o diretório " + jTxtDiretorio.getText() + ".");
        } else {
            String[] cmds1 = {
                //                    jTxtDiretorio.getText().substring(0, 2), //muda para o diretorio no windows
                //                    "cd " + jTxtDiretorio.getText(),
                "git push -u origin main"
            };
            jTextArea1.append("Push em " + new java.util.Date() + "\n");
            jTextArea1.append("-----------------------------------------------" + "\n");
            Commands commands = new Commands();
            List lista = commands.processaCmd(cmds1);
            for (int i = 0; i < lista.size(); i++) {
                System.out.println(lista.get(i));
                jTextArea3.append(lista.get(i) + "\n");
            }
        }
    }//GEN-LAST:event_jBtnPushActionPerformed

    private void jBtnCommitPushActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCommitPushActionPerformed
        // TODO add your handling code here:
        if (jTextArea2.getText().isEmpty()) {
            Util.mensagem("Para este comando deve ser preenchido o Texto do commit.");
            jTextArea2.grabFocus();
        } else if (!gitConfigurado(jTxtDiretorio.getText())) {
            Util.mensagem("GIT não está configurado para o diretório " + jTxtDiretorio.getText() + ".");
        } else {
            String[] cmds1 = {
                //                    jTxtDiretorio.getText().substring(0, 2), //muda para o diretorio no windows
                //                    "cd " + jTxtDiretorio.getText(),
                "git add *",
                "git commit -m \"" + jTextArea2.getText() + "\"",
                "git push -u origin main"
            };
            jTextArea1.append("Commit e Push em " + new java.util.Date() + "\n");
            jTextArea1.append("-----------------------------------------------" + "\n");
            Commands commands = new Commands();
            List lista = commands.processaCmd(cmds1);
            for (int i = 0; i < lista.size(); i++) {
                System.out.println(lista.get(i));
                jTextArea3.append(lista.get(i) + "\n");
            }
        }
    }//GEN-LAST:event_jBtnCommitPushActionPerformed

    private void jBtnConfigGitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnConfigGitActionPerformed
        // TODO add your handling code here:
        String[] cmds1 = {
            //                    jTxtDiretorio.getText().substring(0, 2), //muda para o diretorio no windows
            //                    "cd " + jTxtDiretorio.getText(),
            "git init",
            "git config --global user.name  \"" + jTxtNick.getText() + "\"",
            "git config --global user.email \"" + jTxtEmail.getText() + "\"",
            "git branch -M main",
            "git remote add origin \"" + jTxtRepositorio.getText() + "\"",};
        Commands commands = new Commands();
        List lista = commands.processaCmd(cmds1);
        for (int i = 0; i < lista.size(); i++) {
            System.out.println(lista.get(i));
        }
    }//GEN-LAST:event_jBtnConfigGitActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        carregarDados();
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        salvarDados(); //rem que ser no evento closing
    }//GEN-LAST:event_formWindowClosing

    private void jBtnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnLimparActionPerformed
        // TODO add your handling code here:
        Util.limparCampos(jTextArea1, jTxtNick, jTxtEmail, jTxtRepositorio);

    }//GEN-LAST:event_jBtnLimparActionPerformed

    private void jBtnHistoricoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnHistoricoActionPerformed
        // TODO add your handling code here:
        //git log
        JDlgHistorico jDlgHistorico = new JDlgHistorico(null, true);
        jDlgHistorico.setJConfigGitHub(this);
        jDlgHistorico.setVisible(true);
    }//GEN-LAST:event_jBtnHistoricoActionPerformed

    private void jBtnUltimaConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnUltimaConfigActionPerformed
        // TODO add your handling code here:
        carregarUltimaConfiguracao();
    }//GEN-LAST:event_jBtnUltimaConfigActionPerformed

    private void jBtnClonarRepositorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnClonarRepositorioActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jBtnClonarRepositorioActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JConfigGitHub.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JConfigGitHub.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JConfigGitHub.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JConfigGitHub.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JConfigGitHub dialog = new JConfigGitHub(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnArquivoSistec;
    private javax.swing.JButton jBtnClonarRepositorio;
    private javax.swing.JButton jBtnCommitLocal;
    private javax.swing.JButton jBtnCommitPush;
    private javax.swing.JButton jBtnConfigGit;
    private javax.swing.JButton jBtnHistorico;
    private javax.swing.JButton jBtnLimpar;
    private javax.swing.JButton jBtnPush;
    private javax.swing.JButton jBtnUltimaConfig;
    private javax.swing.JButton jBtnVerificar;
    private javax.swing.JComboBox<String> jCboSistOperacional;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTxtDiretorio;
    private javax.swing.JTextField jTxtEmail;
    private javax.swing.JTextField jTxtNick;
    private javax.swing.JTextField jTxtRepositorio;
    // End of variables declaration//GEN-END:variables
}
